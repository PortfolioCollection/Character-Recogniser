from Neural_Net import*
import random
import numpy as np

class Builder:
    def __init__(self, layer_sizes, inputs):
        """
        Builds a net with given dimensions of nodes and
        autogenerated connections
        """
        self.net = Neaural_Net()
        self.layer_sizes = layer_sizes
        self.inputs = inputs
        length = len(layer_sizes)
        
        #Creates the Input layer
        self.net.add_layer()
        for i in range(layer_sizes[0]):
            if i < len(inputs):
                self.net.add_input_node(inputs[i])
            else:
                self.net.add_input_node(0)
        
        #Set up Hidden Layers       
        for h in range(1,length-1):
            self.net.add_layer()
            for n in range(layer_sizes[h]):
                self.net.add_hidden_node(h)
            self.connect_layers(layer_sizes,h-1, h)
        
        #Setup Output layer
        self.net.add_layer()
        for o in range(layer_sizes[length-1]):
            self.net.add_output_node()

        #Connect all the layers from left to right
        self.connect_layers(layer_sizes,length-2, length-1)

    def connect_layers(self,layer_sizes,prev, nxt):
        """
        Sets all the nodes to look at each other through wires
        """
        for i in range(layer_sizes[prev]):
            for j in range(layer_sizes[nxt]):
                #Sets the wire to a random value from -1 to 1
                self.net.connect(self.net.layers[prev][i], self.net.layers[nxt][j],random.uniform(-1, 1))
                
    def get_net(self):
        return self.net

def collect_connections_weights(net):
    """
    Records a list of the weights in the net

    Two layers of connections
    [array([[ 1, 21],
            [54, 32],
            [42, 12]])
     array([[43, 62, 75],
            [85, 23, 95]])]
    """        
    connections = []
    for layer in net.layers[:-1]:
        connection_layer = []
        for node in layer:
            node_connections = []
            for connection in node.connections[1]:      #output connections
                node_connections.append(connection.weight)
            connection_layer.append(np.array(node_connections))
        connections.append(np.array(connection_layer))
    return np.array(connections)

def mass_set_connections(net,array):
    """
    Sets the connections of the net to the given np array


    layer1 = np.array([[1,21],[54,32],[42,12]])
    layer2 = np.array([[43,62,75],[85,23,95]])
    net = mass_set_connections(net,np.array([layer1,layer2]))
    """
    count = 0
    result = []
    for layer in array.flatten():
        result.extend(layer.flatten())
    for layer in net.layers:
        for node in layer:
            for connection in node.connections[1]:
                connection.weight = result[count]
                count+=1
    return net        


def show_net(net):
    """
    Runs the visualizer on the net
    """
    layer_sizes = []
    nodes = []
    for layer in net.layers:
        layer_sizes.append(len(layer))
        for node in layer:
            nodes.append(node.value)
    weights = []
    for layer in net.layers:
        for node in layer:
            for connection in node.connections[1]:
                weights.append(connection.weight)
    Visualizer.draw_neural_net(0.1, 1, 0, 1, layer_sizes, nodes, weights)


if __name__ == "__main__":
    builder = Builder(np.array([3,2,3]),list(range(100)))
    net = builder.net
    connections = collect_connections_weights(net)
    print(connections)
    layer1 = np.array([[1,21],[54,32],[42,12]])
    layer2 = np.array([[43,62,75],[85,23,95]])
    net = mass_set_connections(net,np.array([layer1,layer2]))
    show_net(net)

