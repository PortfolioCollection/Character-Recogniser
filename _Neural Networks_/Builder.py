from Neural_Net import*

class Builder:
    def __init__(self, layer_sizes):
        """
        Builds a net with given dimensions of nodes and
        autogenerated connections
        """
        self.length = len(layer_sizes)
        self.net = Neaural_Net(self.length)
        self.layer_sizes = layer_sizes
        
    def generate_net(self):
        """
        First creates an input layer
        and then all the other layers node/connections
        """
        #Input Layer
        inputs = np.zeros(self.layer_sizes[0])
        biases = np.random.uniform(-1,1,self.layer_sizes[0])
        self.net.add_node_layer(inputs, biases)
        #Hidden Layer and Output Layer
        for i in range(1,self.length):
            data = np.zeros(self.layer_sizes[i])
            biases = np.random.uniform(-1,1,self.layer_sizes[i])
            connections = np.random.uniform(-1,1,(self.layer_sizes[i],self.layer_sizes[i-1]))
            self.net.add_node_layer(data, biases)
            self.net.add_connection_layer(connections)
        return self.net

    
    
    def get_net(self):
        return self.net

if __name__ == "__main__":
    builder = Builder(np.array([3,2,3]))
    net = builder.generate_net()
    net.set_inputs(list(range(3)))
    net.show(0,2)
